@page "/chatrooms/{id:guid}/settings/"
@using ChatJaffApp.Client.ChatRoom.Components;
@using ChatJaffApp.Client.ChatRoom.MyChatRooms.Contracts;
@using System.Security.Claims;
@using ChatJaffApp.Client.ChatRoom.MyChatRooms.Models;
@using ChatJaffApp.Client.Member.Contracts;
@using ChatJaffApp.Client.Member.Models;
@inject IMemberService memberService
@inject IChatRoomsService chatRoomService
@inject AuthenticationStateProvider authenticationStateProvider;
@inject NavigationManager navManager;
<PageTitle>Chat Settings</PageTitle>
<div>
    <container>
        @if (ChatRoom.ChatName != null)
        {
            <h2 data-cy="chatroom-settings-title">
                @ChatRoom.ChatName
            </h2>
        }
        <div class="card" style="width: 18rem; ">
            <div class="card-header">
                Chat members
            </div>
            <ul class="list-group list-group-flush">
                @if (ChatMembers != null || ChatMembers?.Count < 1)
                {
                    @foreach (var member in ChatMembers)
                    {
                        <li class="list-group-item">
                            <p>@member.Username</p>
                            @if(IsModerator)
                            {
                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveMemberFromChat(member)">@(member.UserId == UserId ? "Leave" : "Remove")</button>
                            }
                            else if(member.UserId == UserId)
                            {
                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveMemberFromChat(member)">Leave</button>
                            }
                        </li>
                    }
                }
                else
                {
                    <p>No users</p>
                }
            </ul>
        </div>
        
        <h2>Add Member</h2>
        <FindMemberForChat CurrentChatMembers="ChatMembers" OnFoundMember="HandleFoundMember"></FindMemberForChat>

        @if (!string.IsNullOrEmpty(Message))
        {
            <p data-cy="chatsettings-error-message">@Message</p>
        }

        @if (IsModerator)
        {
            <ChangeChatNameForm HandleClick="@ChangeChatName" />
            <button class="btn btn-danger" @onclick="() => OnDeleteChatRoom()">Delete Chat</button>
        }
    </container>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }
    public Guid UserId { get; set; }
    public bool IsModerator { get; set; }
    public List<ChatMemberViewModel> ChatMembers = new();
    public GetChatRoomDto ChatRoom { get; set; } = new();
    public string? Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ChatRoom = await chatRoomService.GetChatRoom(Id);
        var user = await authenticationStateProvider.GetAuthenticationStateAsync();
        UserId = Guid.Parse(user.User.FindFirst(ClaimTypes.NameIdentifier).Value);
        ChatMembers = ChatRoom.ChatMembers;
        IsModerator = UserId == ChatRoom.CreatorId;
    }

    public async Task RemoveMemberFromChat(ChatMemberViewModel member)
    {
        if (member is null)
        {
            return;
        }

        var result = await chatRoomService.RemoveChatMember(Id, member.UserId);

        if (!result.Success)
        {
            Message = result.Message;
            return;
        }

        ChatMembers.Remove(member);

        if(!ChatMembers.Any(c => c.UserId == UserId))
        {
            navManager.NavigateTo("/chatrooms");
        }

    }

    public async Task OnDeleteChatRoom()
    {
        if (!IsModerator)
        {
            Message = "Not allowed";
        }

        var result = await chatRoomService.DeleteChatRoom(Id);

        if (!result.Success)
        {
            Message = result.Message;
        }

        navManager.NavigateTo("/chatrooms");
    }

    public async Task HandleFoundMember(ChatMemberViewModel memberToAddToChat)
    {
        AddMemberDto addMemberDto = new()
            {
                UserId = memberToAddToChat.UserId,
                ChatId = Id
            };

        var memberResponse = await chatRoomService.AddChatMember(addMemberDto);

        if (!memberResponse.Success)
        {
            Message = memberResponse.Message;
            return;
        }

        ChatMembers.Add(memberToAddToChat);
    }

    public async Task ChangeChatName(string newName)
    {
        try
        {
            await chatRoomService.ChangeChatName(newName, Id);
            ChatRoom.ChatName = newName;
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }
}

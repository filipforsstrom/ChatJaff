@page "/chatrooms/{id:guid}/settings/"
@using ChatJaffApp.Client.ChatRoom.Components
@using ChatJaffApp.Client.ChatRoom.Member.Models;
@using ChatJaffApp.Client.ChatRoom.MyChatRooms.Contracts;
@inject IMemberService memberService
@inject IChatRoomsService chatRoomService

<div>
    <container>
        <h2>
            Members
        </h2>
        <div class="card" style="width: 18rem; ">
        <div class="card-header">
            Chat members
        </div>
        <ul class="list-group list-group-flush">
            @if (ChatMembers != null || ChatMembers?.Count < 1)
            {
                @foreach (var member in ChatMembers)
                {
                    <li class="list-group-item"><p>@member.Username</p><button class="btn btn-danger btn-sm" @onclick="() => DeleteMemberFromChat(member)">Remove</button> </li>
                }
            }
            else
            {
                <p>No users</p>
            }
        </ul>
</div>
        
        <br><br>
        <h2>Change chat name</h2>
        <input type="text" />
        <br><br>
        <h2>Add Member</h2>
        <FindMemberForChat CurrentChatMembers="ChatMembers" OnFoundMember="HandleFoundMember"></FindMemberForChat>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p>@ErrorMessage</p>
        }
    </container>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }
    public List<ChatMember> ChatMembers = new();
    public string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ChatMembers = await chatRoomService.GetChatMembers(Id);
    }

    public async Task DeleteMemberFromChat(ChatMember memberToDeleteFromChat)
    {
        
    }

    public async Task HandleFoundMember(ChatMember memberToAddToChat)
    {
        AddMemberDto addMemberDto = new()
        {
            UserId = memberToAddToChat.UserId,
            ChatId = Id
        };

        var memberResponse = await memberService.AddChatMember(addMemberDto);

        if (!memberResponse.Success)
        {
            ErrorMessage = memberResponse.Message;
            return;
        }
        
        ChatMembers.Add(memberToAddToChat);
    }
}

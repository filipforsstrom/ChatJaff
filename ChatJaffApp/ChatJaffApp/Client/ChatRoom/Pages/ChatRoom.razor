@page "/chatrooms/{id:guid}"
@using System.Security.Claims;
@using ChatJaffApp.Client.ChatRoom.Messages.Contracts;
@using ChatJaffApp.Client.ChatRoom.Messages.Models;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text.Json;
@using ChatJaffApp.Client.ChatRoom.MyChatRooms.Contracts;
@using Microsoft.AspNetCore.Authorization;
@using ChatJaffApp.Client.ChatRoom.MyChatRooms.Models
@inject AuthenticationStateProvider authStateProvider
@inject HttpClient httpClient;
@inject NavigationManager navigation
@inject IChatRoomsService chatRoomsService
@attribute [Authorize]
@inject IMessageService messageService
@inject IJSRuntime _jsRuntime

<h3>@CurrentChatRoom.ChatName</h3>

<div id="chatContainer" style="height: 55vh; overflow-y:auto;">
   
    @if (Messages != null)
    {

        @foreach (var message in Messages)
        {
            <div class="card" style="width: 18rem; margin-bottom: 5px; background-color: @(!message.IsFlagged? (MessageDto.UserName == message.UserName ? "forestgreen" : "cornflowerblue"):"darkred"); color: whitesmoke; border-radius: 15px;">
                <div class="card-body">
                    <h6 style = "font-size:14px"class="card-title">@message.UserName</h6>
                    <p style="color:lightgray; font-size: 9px;" class="card-subtitle mb-2">Sent: @message.Sent</p>
                    <p class="card-text">@message.Content</p>


                    @if (!message.IsFlagged && MessageDto.UserName ==message.UserName)
                    {
                        <i @onclick="()=>EditMessage(message.Id)" style="margin-right: 90px" class="bi bi-pencil-square"></i>
                        <i @onclick="()=>DeleteMessage(message.Id)" style="margin-right: 90px" class="bi bi-x-circle"></i>

                    }
                    @if (MessageDto.UserName != message.UserName && message.UserName !="System")
                    {
                        <i @onclick="()=>FlagMessage(message.Id)" class="@(message.IsFlagged? "bi bi-flag-fill" : "bi bi-flag")"></i>
                    }
                    

                </div>
                @if (message.IsEdited)
                {
                    <InputTextArea placeholder="@message.Content" maxlength="150" @bind-Value="EditedMessage"></InputTextArea>
                    <button style="margin-top: 2px;" class="btn btn-info btn-sm" @onclick="() => SendEditMessage(message.Id)">Save</button>
                }
            </div>
        }

    }
</div>
<div class="card" style="width: 18rem; margin-top: 20px">
    
        <InputTextArea  class="card-body" id="messageinputarea" maxlength="150" @bind-Value="MessageDto.Content" />
        <button style="margin-top:5px" id="sendmessagebtn" @onclick="OnSendMessageClick" class=" btn btn-primary">Send</button>
    
</div>
<div>
    <button style="margin-top: 5px" class="btn btn-primary" @onclick="OnSettingsClick">Settings</button>
</div>


@code {
    [Parameter]
    public Guid Id { get; set; }
    public SendMessageDto MessageDto { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;
    private List<ReceiveMessageDto> Messages { get; set; } = new();
    private bool Encrypted { get; set; } = false;
    public GetChatRoomDto CurrentChatRoom { get; set; } = new();


    private string? CurrentUserName { get; set; } = string.Empty;
    private HubConnection? HubConnection;
    public bool IsConnected => HubConnection.State == HubConnectionState.Connected;
    private string EditedMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        CurrentChatRoom = await chatRoomsService.GetChatRoom(Id);
        GetStoredMessages();

        var state = await authStateProvider.GetAuthenticationStateAsync();
        var userIdValue = state.User.FindFirst(ClaimTypes.NameIdentifier).Value;
        CurrentUserName = state.User.FindFirst(ClaimTypes.Name).Value;
        Guid userId = Guid.Parse(userIdValue);
        var creatorId = CurrentChatRoom.CreatorId;

        if (CurrentChatRoom.ChatMembers.Any(chatmember => chatmember.UserId.Equals(userId)))
        {
            MessageDto.UserId = Guid.Parse(userIdValue);
            MessageDto.UserName = CurrentUserName;
            MessageDto.Encrypted = CurrentChatRoom.Encrypted;

            var url = navigation.ToAbsoluteUri("/chathub");

            HubConnection = new HubConnectionBuilder()
                .WithUrl(url)
                .WithAutomaticReconnect()
                .Build();

            HubConnection.On<string>("ReceiveMessage", async (response) =>
            {
                var deserializedResponse = JsonSerializer.Deserialize<ReceiveMessageDto>(response);

                Messages.Add(deserializedResponse);
                await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
                await InvokeAsync(StateHasChanged);
            });

            HubConnection.On<string>("MemberJoined", (message) =>
            {
                ReceiveMessageDto memberJoinedResponse = new()
                    {
                        UserName = "System",
                        Content = message,
                        Sent = DateTime.UtcNow
                    };

                Messages.Add(memberJoinedResponse);
                InvokeAsync(StateHasChanged);
            });
            await HubConnection.StartAsync();
            await HubConnection.SendAsync("AddToGroup", Id);
        }
        else
        {
            navigation.NavigateTo("/");
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
    }

    private void GetStoredMessages()
    {

        foreach (var message in CurrentChatRoom.Messages)
        {
            Messages.Add(new ReceiveMessageDto
                {
                    Id = message.Id,
                    UserName = message.UserName,
                    Content = message.Content,

                    Sent = message.Sent,
                    IsFlagged = message.IsFlagged,

                });

        };
    }

    private async Task OnSendMessageClick()
    {

        if (string.IsNullOrEmpty(MessageDto.Content))
        {
            ErrorMessage = "Message can not be empty";
            //ta bort meddelande efteråt
        }
        else
        {

            var messageModelToJson = JsonSerializer.Serialize(MessageDto);
            await HubConnection.SendAsync("SendMessageAsync", messageModelToJson, Id);

            MessageDto.Content = string.Empty;
        }

    }

    private void OnSettingsClick()
    {
        navigation.NavigateTo($"/chatrooms/{Id}/settings/");
    }

    public async void DeleteMessage(Guid id)
    {

        var response = await messageService.DeleteMessage(id);
        if (response.Success)
        {
            var message = Messages.Select(m => m).Where(m => m.Id == id).FirstOrDefault();
            Messages.Remove(message);
            await InvokeAsync(StateHasChanged);
        }

    }

    public async void FlagMessage(Guid messageId)
    {
        var response = await messageService.FlagMessage(messageId);

        if (response.Success)
        {
            Messages.Find(m => m.Id == messageId).IsFlagged = true;

            await InvokeAsync(StateHasChanged);
        }

    }

    public void EditMessage(Guid messageId)
    {
        Messages.Find(m => m.Id == messageId).IsEdited = true;
    }

    public async void SendEditMessage(Guid messageId)
    {
        EditMessageRequest newMessage = new() { MessageId = messageId, EditedMessage = EditedMessage, Encrypted = MessageDto.Encrypted };

        var response = await messageService.EditMessage(newMessage);
        if (response.Success)
        {

            var message = Messages.Find(m => m.Id == messageId);
            message.Content = response.Data;
            message.IsEdited = false;
            EditedMessage = "";
            await InvokeAsync(StateHasChanged);
        }

    }

    public class SendMessageDto
    {
        public Guid UserId { get; set; }
        public string Content { get; set; }
        public string UserName { get; set; }
        public bool Encrypted { get; set; }
    }

    public class ReceiveMessageDto
    {
        public Guid Id { get; set; }
        public string? UserName { get; set; }
        public string? Content { get; set; }
        public bool IsFlagged { get; set; }
        public DateTime Sent { get; set; }
        public bool IsEdited { get; set; }
    }
}
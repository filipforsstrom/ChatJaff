@page "/chatrooms/chat/{id:guid}"
@using System.Security.Claims;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text.Json;
@inject AuthenticationStateProvider authStateProvider
@inject HttpClient httpClient;
@inject NavigationManager navigation
<h3>Welcome</h3>

<div>
    <p>Your Messages:</p>
    @if (Messages != null)
    {
        <ul style="list-style-type: none;">
        @foreach (var message in Messages)
        {
            <li style="padding: 5px; background-color: cornflowerblue; color: whitesmoke; margin-bottom: 5px; max-width: 300px;display: flex;
  justify-content: center; align-items: center; flex-direction: column;">
                <h4 style="font-size: 15px;">@message.UserName says @message.Content</h4>
                <p style="font-size: 10px;">Sent: @message.Sent</p>
            </li>
        }
        </ul>
    }
</div>
<div>
    <InputTextArea maxlength="150" @bind-Value="MessageDto.Content" />
    <button @onclick="onSendMessageClick" class=" btn btn-primary">Send</button>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }
    public SendMessageDto MessageDto { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;

    private List<ReceiveMessageDto> Messages { get; set; } = new();

    private HubConnection? hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;


    protected override async Task OnInitializedAsync()
    {
        var state = await authStateProvider.GetAuthenticationStateAsync();
        var userId = state.User.FindFirst(ClaimTypes.NameIdentifier).Value;
        var username = state.User.FindFirst(ClaimTypes.Name).Value;

        MessageDto.UserId = Guid.Parse(userId);
        MessageDto.UserName = username;

        var url = navigation.ToAbsoluteUri("/chathub");

        hubConnection = new HubConnectionBuilder()
            .WithUrl(url)
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("ReceiveMessage", (response) =>
        {
            var deserializedResponse = JsonSerializer.Deserialize<ReceiveMessageDto>(response);          

            Messages.Add(deserializedResponse);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("MemberJoined", (message) =>
        {
            ReceiveMessageDto memberJoinedResponse = new()
            {
                UserName = "System",
                Content = message,
                Sent = DateTime.UtcNow
            };

            Messages.Add(memberJoinedResponse);
            InvokeAsync(StateHasChanged);
        });        
        await hubConnection.StartAsync();
        await hubConnection.SendAsync("AddToGroup", Id);
    }

    private async Task onSendMessageClick()
    {

        if (string.IsNullOrEmpty(MessageDto.Content))
        {
            ErrorMessage = "Message can not be empty";
            //ta bort meddelande efteråt
        }
        else {
            var messageModelToJson = JsonSerializer.Serialize(MessageDto);
            await hubConnection.SendAsync("SendMessageAsync", messageModelToJson, Id);

            MessageDto.Content = string.Empty;
        }

    }

    public class SendMessageDto
    {
        public Guid UserId { get; set; }
        public string Content { get; set; }
        public string UserName { get; set; }
    }

    public class ReceiveMessageDto
    {
        public Guid Id { get; set; }
        public string? UserName { get; set; }
        public string? Content { get; set; }
        public DateTime Sent { get; set; }
    }

    
}
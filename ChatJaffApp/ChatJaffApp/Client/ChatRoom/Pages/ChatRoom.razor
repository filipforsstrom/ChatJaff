@page "/chatrooms/{id:guid}"
@using System.Security.Claims;
@using ChatJaffApp.Client.ChatRoom.Messages.Contracts;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text.Json;
@using ChatJaffApp.Client.ChatRoom.MyChatRooms.Contracts;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.SignalR.Client;
@using ChatJaffApp.Client.ChatRoom.MyChatRooms.Models
@using System.Text.Json;
@using Blazor.SubtleCrypto;
@inject AuthenticationStateProvider authStateProvider
@inject HttpClient httpClient;
@inject NavigationManager navigation
@inject ICryptoService Crypto;
@inject IChatRoomsService chatRoomsService
@attribute [Authorize]
@inject IMessageService messageService
<h3>Welcome</h3>

<div>
    <p>Your Messages:</p>
    @if (Messages != null)
    {
        <ul id="messagesinchatlist" style="list-style-type: none;">
            @foreach (var message in Messages)
            {

                <li style="padding: 5px; background-color: @(MessageDto.UserName == message.UserName ? "green" : "cornflowerblue"); color: whitesmoke; margin-bottom: 5px; max-width: 300px;display: flex;
                    justify-content: center; align-items: center; flex-direction: column;">
                    <h4 id="messagecontent" style="font-size: 15px;">@message.UserName says @message.Content</h4>
                    <p id="messagetimestamp" style="font-size: 10px;">Sent: @message.Sent</p>
                    @if (message.UserName == CurrentUserName)
                    {
                        <button data-cy="delete-message-button" class="btn btn-primary btn-sm" @onclick="() => deleteMessage(message.Id)">delete</button>
                    }

                </li>
            }
        </ul>
    }
</div>
<div>
    <InputTextArea id="messageinputarea" maxlength="150" @bind-Value="MessageDto.Content" />
    <button id="sendmessagebtn" @onclick="onSendMessageClick" class=" btn btn-primary">Send</button>
</div>
<div>
    <button style="margin-top: 5px" class="btn btn-primary" @onclick="onSettingsClick">Settings</button>
</div>


@code {
    [Parameter]
    public Guid Id { get; set; }
    public SendMessageDto MessageDto { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;
    private List<ReceiveMessageDto> Messages { get; set; } = new();
    private bool Encrypted { get; set; } = false;
    public GetChatRoomDto CurrentChatRoom { get; set; }
    private EncryptionManager keeperOfSecrets = new();


    private string? CurrentUserName { get; set; } = string.Empty;
    private HubConnection? hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        CurrentChatRoom = await chatRoomsService.GetChatRoom(Id);
        GetStoredMessages();

        var state = await authStateProvider.GetAuthenticationStateAsync();
        var userIdValue = state.User.FindFirst(ClaimTypes.NameIdentifier).Value;
        CurrentUserName = state.User.FindFirst(ClaimTypes.Name).Value;
        Guid userId = Guid.Parse(userIdValue);
        var creatorId = CurrentChatRoom.CreatorId;

        //ChatMemberViewModel currentUser = new()
        //{
        //    UserId = userId,
        //    Username = CurrentUserName,
        //};
        //CurrentChatRoom.ChatMembers.Add(currentUser);



        if (CurrentChatRoom.ChatMembers.Any(chatmember => chatmember.UserId.Equals(userId)))
        {
            MessageDto.UserId = Guid.Parse(userIdValue);
            MessageDto.UserName = CurrentUserName;
            MessageDto.Encrypted = CurrentChatRoom.Encrypted;

            var url = navigation.ToAbsoluteUri("/chathub");

            hubConnection = new HubConnectionBuilder()
                .WithUrl(url)
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string>("ReceiveMessage", async (response) =>
            {
                var deserializedResponse = JsonSerializer.Deserialize<ReceiveMessageDto>(response);

                Messages.Add(deserializedResponse);
                await InvokeAsync(StateHasChanged);
            });

            hubConnection.On<string>("MemberJoined", (message) =>
            {
                ReceiveMessageDto memberJoinedResponse = new()
                    {
                        UserName = "System",
                        Content = message,
                        Sent = DateTime.UtcNow
                    };

                Messages.Add(memberJoinedResponse);
                InvokeAsync(StateHasChanged);
            });
            await hubConnection.StartAsync();
            await hubConnection.SendAsync("AddToGroup", Id);
        }
        else
        {
            navigation.NavigateTo("/");
        }

    }

    private void GetStoredMessages()
    {

        foreach (var message in CurrentChatRoom.Messages)
        {
            Messages.Add(new ReceiveMessageDto
                {
                    Id = message.Id,
                    UserName = message.UserName,
                    Content = message.Content,
                    Sent = message.Sent
                });
        };
    }

    private async Task onSendMessageClick()
    {

        if (string.IsNullOrEmpty(MessageDto.Content))
        {
            ErrorMessage = "Message can not be empty";
            //ta bort meddelande efteråt
        }
        else
        {
            var messageModelToJson = JsonSerializer.Serialize(MessageDto);
            await hubConnection.SendAsync("SendMessageAsync", messageModelToJson, Id);

            MessageDto.Content = string.Empty;
        }

    }

    private void onSettingsClick()
    {
        navigation.NavigateTo($"/chatrooms/{Id}/settings/");
    }

    public async void deleteMessage(Guid id)
    {

        var response = await messageService.DeleteMessage(id);
        if (response.Success)
        {
            var message = Messages.Select(m => m).Where(m => m.Id == id).FirstOrDefault();
            Messages.Remove(message);
            InvokeAsync(StateHasChanged);
        }


    }


    public class SendMessageDto
    {
        public Guid UserId { get; set; }
        public string Content { get; set; }
        public string UserName { get; set; }
        public bool Encrypted { get; set; }
    }

    public class ReceiveMessageDto
    {
        public Guid Id { get; set; }
        public string? UserName { get; set; }
        public string? Content { get; set; }
        public DateTime Sent { get; set; }
        public string IdAsString { get; set; }
    }
}
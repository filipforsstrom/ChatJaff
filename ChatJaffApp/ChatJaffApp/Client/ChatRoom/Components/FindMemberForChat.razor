@inject IMemberService memberService;

<EditForm Model="@findMemberRequest" OnValidSubmit="@handleUserSearchSubmit">
    <DataAnnotationsValidator />
    <InputText @bind-Value="findMemberRequest.SearchedUsername" />
    <button>
        Add
    </button>
    <ValidationMessage For="() => findMemberRequest.SearchedUsername" />
</EditForm>

<div>
    <h4>@(ErrorMessage != null ? ErrorMessage : null)</h4>
</div>

@code {
    [Parameter]
    public List<ChatMember> CurrentChatMembers { get; set; } = new();
    [Parameter]
    public EventCallback<ChatMember> OnFoundMember { get; set; }
    public InviteMemberDto findMemberRequest { get; set; } = new();
    public string ErrorMessage { get; set; } = string.Empty;

    public async Task handleUserSearchSubmit()
    {
        // kolla om du försöker lägga till själv.
        if (CurrentChatMembers.Select(m => m.Username?.ToLower()).Contains(findMemberRequest.SearchedUsername?.ToLower()))
        {
            ErrorMessage = "Member is already added";
            return;
        }

        var memberSearchResponse = await memberService.GetChatMember(findMemberRequest);

        if (!memberSearchResponse.Success)
        {
            ErrorMessage = memberSearchResponse.Message;
            return;
        }

        ChatMember memberToAddToChat = new()
        {
            UserId = memberSearchResponse.Data.UserId,
            Username = memberSearchResponse.Data.Username
        };

        ErrorMessage = "";
        await OnFoundMember.InvokeAsync(memberToAddToChat);
    }
}


@using System.Security.Claims;
@inject IMemberService memberService;
@inject AuthenticationStateProvider authenticationStateProvider;

<EditForm Model="@getMemberRequest" OnValidSubmit="@handleUserSearchSubmit">
    <DataAnnotationsValidator />
    <InputText @bind-Value="getMemberRequest.SearchedUsername" />
    <button>
        Add
    </button>
    <ValidationMessage For="() => getMemberRequest.SearchedUsername" />
</EditForm>

<div>
    <h4>@(ErrorMessage != null ? ErrorMessage : null)</h4>
</div>

@code {
    [Parameter]
    public List<ChatMemberViewModel> CurrentChatMembers { get; set; } = new();
    [Parameter]
    public EventCallback<ChatMemberViewModel> OnFoundMember { get; set; }
    public Guid UserId { get; set; }
    public GetMemberDto getMemberRequest { get; set; } = new();
    public string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        var userId = state.User.FindFirst(ClaimTypes.NameIdentifier).Value;
        UserId = Guid.Parse(userId);
    }

    public async Task handleUserSearchSubmit()
    {
        if (CurrentChatMembers.Select(m => m.Username?.ToLower()).Contains(getMemberRequest.SearchedUsername?.ToLower()))
        {
            ErrorMessage = "Member is already added";
            return;
        }

        var memberSearchResponse = await memberService.GetMember(getMemberRequest);

        if (!memberSearchResponse.Success)
        {
            ErrorMessage = memberSearchResponse.Message;
            return;
        }

        if (UserId == memberSearchResponse.Data.UserId)
        {
            ErrorMessage = "No need to add yourself";
            return;
        }

        ChatMemberViewModel memberToAddToChat = new()
        {
            UserId = memberSearchResponse.Data.UserId,
            Username = memberSearchResponse.Data.Username
        };

        ErrorMessage = "";
        await OnFoundMember.InvokeAsync(memberToAddToChat);
    }
}


@page "/chatrooms/createchat";
@using ChatJaffApp.Client.ChatRoom.Components;
@using ChatJaffApp.Client.Account;
@using System.Security.Claims;
@inject HttpClient httpClient;
@inject NavigationManager navManager;
@inject ICreateChatService createChatservice;
@inject CustomAuthStateProvider authStateProvider;

<div>
    <div>
        <h3>Add User To Chat</h3>
        <FindMemberForChat CurrentChatMembers="ChatMembers" OnFoundMember="HandleFoundMember"/>
    </div>
    
    <div>
        <br />
        <div class="card" style="width: 18rem; ">
            <div class="card-header">
                Chat members
            </div>
            <ul class="list-group list-group-flush">
                @if (ChatMembers != null || ChatMembers?.Count < 1)
                {
                    @foreach (var member in ChatMembers)
                    {
                        <li class="list-group-item"><p>@member.Username</p><button class="btn btn-danger btn-sm" @onclick="() => onDeleteMember(member)">Remove</button> </li>
                    }
                }
                else
                {
                    <p>No users added =(</p>
                }
            </ul>
        </div>
        <br />

        <div>
            <p>
            <label>
                Chat name:
                <InputText id="chat-name" @bind-Value="createChatRequest.ChatName" />
            </label>
            </p>
            <p>
            <label>
                Encrypted chat:
                <InputCheckbox id="encrypted-chat-checkbox" @bind-Value="createChatRequest.Encrypted" />
            </label>
            </p>
            <button id="create-chat-button" @onclick="onCreateChatClick">Create Chat</button>
        </div>
    </div>

    <div>
        <h3>@(ErrorMessage != null ? ErrorMessage : null)</h3>
    </div>

</div>

@code {
    List<ChatMemberViewModel>? ChatMembers { get; set; } = new();
    string? ErrorMessage { get; set; } = string.Empty;
    public CreateChatDto createChatRequest { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {

    }

    private void HandleFoundMember(ChatMemberViewModel memberToAddToChat)
    {
        ChatMembers.Add(memberToAddToChat);
    }


    private async Task onDeleteMember(ChatMemberViewModel member)
    {
        var memberToDelete = ChatMembers.Find(m => m.Username.Equals(member.Username, StringComparison.OrdinalIgnoreCase));

        if(memberToDelete != null)
        {
            ChatMembers.Remove(memberToDelete);
        }
    }

    public async Task onCreateChatClick()
    {
        if (ChatMembers?.Count < 1)
        {
            ErrorMessage = "Please add members to the chat.";
            return;
        }
        else if (string.IsNullOrEmpty(createChatRequest.ChatName) || createChatRequest.ChatName.Length < 3)
        {
            ErrorMessage = "Chat name must be atleast three characters";
            return;
        }
        else
        {
            List<Guid> tempIds = new List<Guid>();

            foreach(var member in ChatMembers)
            {
                tempIds.Add(member.UserId);
            }

            // lägg till användare till requesten
            createChatRequest.ChatMembersIds = tempIds;

            // lägg till inloggad användare till payload

            // skapa chattrum
            var response = await createChatservice.CreateChat(createChatRequest);

            if (!response.Success)
            {
                //ErrorMessage = response.Data;
                return;
            }

            navManager.NavigateTo($"/chatrooms/{response.Data}");

        }
    }
}

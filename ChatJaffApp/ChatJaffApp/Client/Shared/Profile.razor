@page "/profile"
@inject IIdentityService identityService;
@inject ILocalStorageService localStorage;
@inject CustomAuthStateProvider authenticationStateProvider;
@inject NavigationManager navManager;
@using Blazored.LocalStorage;
@using ChatJaffApp.Client.Account.Contracts;
@using ChatJaffApp.Client.Account.Models;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize];

<PageTitle>Profile</PageTitle>

<div style="display: flex; padding: 10px;flex-direction: column; gap: 50px; box-shadow: rgba(0, 0, 0, 0.16) 0px 10px 36px 0px, rgba(0, 0, 0, 0.06) 0px 0px 0px 1px;">
    <div>
        <h4>User Info</h4>
    </div>

    <div>
        <h4>Change password</h4>
        <EditForm Model="changePasswordForm" OnValidSubmit="onChangePasswordSubmit"
                  style="display: flex; gap: 20px; flex-direction: column; max-width: 300px;">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>Old password</label>
                <InputText id="old-password-field" class="form-control" type="@(showOldPassword ? "text" : "password")" @bind-Value="changePasswordForm.OldPassword" />
                Show <InputCheckbox @bind-Value="showOldPassword" />
            </div>
            <div class="form-group">
                <label>New password</label>
                <InputText id="new-password-field" class="form-control" type="@(showNewPassword ? "text" : "password")" @bind-Value="changePasswordForm.NewPassword" />
                Show <InputCheckbox @bind-Value="showNewPassword" />
            </div>
            <button id="change-password-button" class="btn btn-sm btn-success">Confirm</button>
        </EditForm>
        <div>
            <p>@changePasswordResponseMessage</p>
        </div>
    </div>

    <div>
        <button id="delete-account-button" @onclick="toggleDeleteDialog" class="btn btn-danger btn-sm">Delete Account</button>
    </div>
</div>


@if (showDeleteDialog)
{
    <div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.8)" aria-modal="true" role="dialog">
        <div class="modal-dialog" @onclick:stopPropagation="true">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Really delete profile?</h4>                    
                </div>
                <div class="modal-body">
                    <p>This will remove you from our database.</p>
                    <p>@deleteIdentityResponseMessage</p>
                    <button id="cancel-delete-button" type="button" class="btn btn-sm btn-primary" @onclick="toggleDeleteDialog">Cancel</button>
                    <button id="confirm-delete-button" type="button" class="btn btn-sm btn-danger" @onclick="onDeleteClick">Confirm</button>
                </div>                
            </div>
        </div>
    </div>
}

@code {
    public ChangePasswordForm changePasswordForm { get; set; } = new();
    public bool showOldPassword { get; set; }
    public bool showNewPassword { get; set; }

    public bool showDeleteDialog { get; set; }

    public string? changePasswordResponseMessage { get; set; } = string.Empty;
    public string? deleteIdentityResponseMessage { get; set; } = string.Empty;

    protected async override Task OnInitializedAsync()
    {

    }

    public async Task onChangePasswordSubmit()
    {

        var changePasswordResponse = await identityService.ChangePassword(changePasswordForm);        

        if (changePasswordResponse.Success)
        {
            changePasswordResponseMessage = "Password changed.";
        } else
        {
            changePasswordResponseMessage = "Failed";
        }
    }

    public void toggleDeleteDialog()
    {
        deleteIdentityResponseMessage = string.Empty;
        showDeleteDialog = !showDeleteDialog;
    }

    public async Task onDeleteClick()
    {
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        var userId = state.User.FindFirst(ClaimTypes.NameIdentifier).Value;

        var deleteResponse = await identityService.DeleteIdentity(userId);

        if (deleteResponse.Success)
        {
            toggleDeleteDialog();
            await authenticationStateProvider.Logout();
            navManager.NavigateTo("/account/login");

        } else
        {
            deleteIdentityResponseMessage = deleteResponse.Data;
        }
    }

    
}
